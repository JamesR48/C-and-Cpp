Iteration example:
	void count_down(int n)
	{
		while(n>0)
		{
			printf("Time is %d \n", n);
			n--;
		}
		printf("BLAST OFF! \n");
	}

Recursive example:
	void recursive_countDown(int n)
	{
		if(n==0)
		{
			//this condition is called "base case"
			printf("BLAST OFF! \n");
		}
		else
		{
			//if we're not at the base case, we do the recursion
			printf("time is %d \n", n);
			recursive_countDown(n-1); //we call the function again with -1
			//the recursion keep doing this until it reaches a value of 0(gets called with a value of 0)
		}
	}

Key ideas:
	-You've a base case (in the example, print blast off at n==0)
	-You've a general(recursive) case (in the example, print the time and count 1 less)
	-It should be easy to see how to make the recursive call if you can find a mathematical function describing the general case
	-Recursive programs can lead to slower running time since they add up in the call stack.
	 For example: Fibonacci has an exponential number of calls that can consume lots of stack space and extra time.